# -*- coding: utf-8 -*-
"""
Created on Mon Nov 25 16:08:52 2019

@author: Admin
"""


import pychrono.core as chrono
#import pychrono.fea as fea
import pychrono.irrlicht as chronoir
import chrono_utils as tool
import math

#import pychrono.cascade as cascade
chrono.SetChronoDataPath('//smbhome.uscs.susx.ac.uk/lag37/Documents/shapeSim/shapeSensing/chrono/data/')
#chrono.SetChronoDataPath("../data/")
print ("Example: Load obj file, generated by a CAD")
#import numpy as np

# -------------------------------------------------------

# CHRONO setup
# set chrono simulation system

mysystem = chrono.ChSystemSMC()
mysystem.Set_G_acc(chrono.ChVectorD(0.,0.,0.))
contact_method = chrono.ChMaterialSurface.SMC
HUMAN_DENSITY = 198.5  # Dkg/m^3
UNIT_FACTOR = 0.01
SHAPE_PATH = 'shapes/printed_April18/C_31.obj'
factor_min_radius = 0.7
metrics = ['mm', 'cm', 'dm', 'm']
metric = metrics[int(math.fabs(round(math.log(UNIT_FACTOR, 10))))]


#   Set the global collision margins. This is specially important for very large 
#   or very small objects. Set this before creating shapes, no before creating 
#   systems
chrono.ChCollisionModel.SetDefaultSuggestedEnvelope(0.001);
chrono.ChCollisionModel.SetDefaultSuggestedMargin(0.001);


print('Contact Method: ', contact_method)
#cp =chrono.SetChronoDataPath("//smbhome.uscs.susx.ac.uk/lag37/Documents/shapeSim/shapeSensing/chrono/data/")
# shapePath = 'shapes/printed_April18/Cone_32.obj'
#shapePath = "shapes/printed_April18/DE_40_13_36.obj"
#shapePath = "shapes/printed_April18/CL01.STL"


filepath = tool.obj_from_millimeter(chrono.GetChronoDataPath() + SHAPE_PATH, UNIT_FACTOR, f"_{metric}")

# filepath = chrono.GetChronoDataPath() + shapePath
print(filepath)

tshape = chrono.ChBody(contact_method)
tshape.SetBodyFixed(True)
tshape_mesh=chrono.ChObjShapeFile()
tshape_mesh.SetFilename(filepath)
tshape.AddAsset(tshape_mesh)
tmc = chrono.ChTriangleMeshConnected()
tmc.LoadWavefrontMesh(filepath)

#sm = chronoir.ChIrrApp.GetSceneManager();
#sm.getMeSH(chrono.GetChronoDataPath() + shapePath)
#

#  Add a collision mesh to the shape

tshape.GetCollisionModel().ClearModel()
tshape.GetCollisionModel().AddTriangleMesh(tmc,True,True)
tshape.GetCollisionModel().BuildModel()
tshape.SetShowCollisionMesh(True)
tshape.SetCollide(False)
#   Add a skin texture
texture = 'textures/skin.jpg'

skinTexture = chrono.ChTexture()
skinTexture.SetTextureFilename(chrono.GetChronoDataPath() + texture )
tshape.GetAssets().push_back(skinTexture)

tshape.SetDensity(HUMAN_DENSITY)

# Get shape bounding box dimensions
bbmin, bbmax = chrono.ChVectorD(),chrono.ChVectorD()
tshape.GetTotalAABB(bbmin,bbmax)
bbmin,bbmax = eval(str(bbmin)),eval(str(bbmax))

bb_dx = bbmax[0] - bbmin[0]
bb_dy = bbmax[1] - bbmin[1]
bb_dz = bbmax[2] - bbmin[2]

min_radius = tool.get_shape_min_radius(SHAPE_PATH, bb_dx, bb_dy) * UNIT_FACTOR
offset= 0.02 * bb_dz
tshape.SetMass(100 * HUMAN_DENSITY * bb_dx * bb_dy * bb_dz)

# Align shape to the center of axis system
tshape.SetPos(chrono.ChVectorD(-bb_dx / 2. - bbmin[0],
                              -bb_dy / 2. - bbmin[1],
                              -bb_dz / 2. - bbmin[2]))
tshape.SyncCollisionModels()
mysystem.Add(tshape)


mfloor= chrono.ChBodyEasyBox(30,1,30,1000,True,True)
mfloor.SetBodyFixed(True)
mysystem.Add(mfloor)
mysystem.Add(mfloor)


#
# --------------------------------------------------------------------------
# 
# define bounding box, bbox, from imported shape

# bbmin, bbmax = chrono.ChVectorD(), chrono.ChVectorD()
# tshape.GetTotalAABB(bbmin,bbmax)
# bbmin, bbmax = eval(str(bbmin)), eval(str(bbmax))
# bb_dx=bbmax[0] - bbmin[0]
# bb_dy=bbmax[1] - bbmin[1]
# bb_dz=bbmax[1] - bbmin[2]

# tshape.SetPos(chrono.ChVectorD(-bb_dx / 2. - bbmin[0],
#                               -bb_dy / 2. - bbmin[1],
#                               -bb_dz / 2. - bbmin[2]))
# tshape.SyncCollisionModels()
# mysystem.Add(tshape)
# mysystem.Add(mfloor)

#bodyA= chrono.ChBodyEasyMesh(chrono.GetChronoDataPath() + shapePath)
bodyA= chrono.ChBodyEasyMesh(chrono.GetChronoDataPath() + SHAPE_PATH,
                            7000,
                            True,
                            True)

bodyA.SetPos(chrono.ChVectorD(0.5,1.,0.))
mysystem.Add(bodyA)

#----------------------------------------------------------------------------
#
#  Visuallisation
#


#
#----------------------------------------------------------------------------
#
#   Irrlicht
#   create an Irrlicht application to visualise the system
#

myapplication = chronoir.ChIrrApp(mysystem, 'Test 01',
                                  chronoir.dimension2du(960,540),False)
myapplication.AddTypicalSky()
myapplication.AddTypicalCamera(chronoir.vector3df(-bb_dx*5000, -bb_dy*5000, -bb_dz*5000))
myapplication.AddTypicalLights()
myapplication.SetPlotCollisionShapes(False)
myapplication.SetPlotCOGFrames(True) # display coord system
myapplication.SetPlotAABB(True)
myapplication.SetShowInfos(False)

#   ==IMPORTANT FOR IRRLICHT TO WORK ===

myapplication.AssetBindAll()
myapplication.AssetUpdateAll()
mysystem.SetupInitial()



#-----------------------------------------------------------------------------
#
#   Run the simulation
#

myapplication.SetTimestep(0.005)
while(myapplication.GetDevice().run()):
    myapplication.BeginScene()
    myapplication.DrawAll()
    myapplication.DoStep()
    myapplication.EndScene()
